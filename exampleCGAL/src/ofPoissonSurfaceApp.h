
#pragma once

#include "ofMain.h"
#include "ofxCGAL.h"

using namespace ofxCGAL;

string file_name = "kitten.xyz";
float cell_size = 0.001;
float remove_percentage = 5.0;
int nb_neighbors = 24;

class ofPoissonSurfaceApp : public ofBaseApp {
public:
    
    void setup()
    {
        while (meshes.size() < MESH_NUM) {
            meshes.push_back(ofMesh());
        }
        meshes[0] = loadXyz(file_name);
        
        {
            PointList points = toCGAL<PointList>(meshes[0]);
            simplifyCloud(points, cell_size);
            meshes[1] = toOf(points);
            ofLogVerbose("after simplify") << meshes[1].getNumVertices() << " points";
        }
        {
            PointList points = toCGAL<PointList>(meshes[1]);
            removeOutliers(points, remove_percentage, nb_neighbors);
            meshes[2] = toOf(points);
            ofLogVerbose("after remove outliers") << meshes[2].getNumVertices() << " points";
        }
        {
            PointList points = toCGAL<PointList>(meshes[2]);
            PointVectorList point_vectors;
            estimateNormals(points, point_vectors, 18);
            orientNormals(point_vectors, 18, true);
            meshes[3] = toOf(point_vectors);
            ofLogVerbose("after estimate normals and orient correction") << meshes[3].getNumVertices() << " points";
        }
        {
            PointVectorList point_vectors = toCGAL<PointVectorList>(meshes[3]);
            Polyhedron_3 polyhedron;
            reconstructPoissonSurface(point_vectors, polyhedron);
            meshes[4] = toOf(polyhedron);
        }
        
        focus_mesh = 0;
    }
    
    void update()
    {
        
    }
    
    void draw()
    {
        cam.begin();
        ofScale(600,600,600);
        if (focus_mesh!=4)
            meshes[focus_mesh].drawVertices();
        else
            meshes[focus_mesh].drawWireframe();
        cam.end();
        
        stringstream ss;
        ss << "[0] input point sets" << endl
        << "[1] points after simplification" << endl
        << "[2] points after outlier removal" << endl
        << "[3] points after normal estimation & orient correction" << endl
        << "[4] mesh generated by poisson surface reconstruction";
        ofDrawBitmapString(ss.str(), 20, 20);
    }
    
    void keyPressed(int key)
    {
        if ((key-'0'>=0) && (key-'0'<=MESH_NUM-1)) {
            focus_mesh = key-'0';
        }
    }
    
    
protected:
    const int MESH_NUM = 5;
    vector<ofMesh> meshes;
    int focus_mesh;
    
    ofEasyCam cam;
};
